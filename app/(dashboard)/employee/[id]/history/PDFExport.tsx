"use client";

import { Button } from "@/components/ui/button";
import { formatIndianTime } from "@/lib/utils/date-format";
import { Download } from "lucide-react";
import { useState } from "react";

interface AttendanceRecord {
  id: string;
  date: string;
  checkIn: string | null;
  checkOut: string | null;
  status: string;
  late: number;
  early: number | null;
}

interface PDFExportProps {
  records: AttendanceRecord[];
  employeeName: string;
  month?: number;
  year?: number;
}

export function PDFExport({
  records,
  employeeName,
  month,
  year,
}: PDFExportProps) {
  const [isExporting, setIsExporting] = useState(false);

  const exportToPDF = async () => {
    setIsExporting(true);

    try {
      // Dynamic import to reduce bundle size
      const jsPDF = (await import("jspdf")).default;
      const autoTable = (await import("jspdf-autotable")).default;

      const doc = new jsPDF();

      // Add company header
      doc.setFontSize(20);
      doc.setTextColor(66, 133, 244); // Blue color
      doc.text("Attendance Report", 20, 25);

      // Add employee info
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Employee: ${employeeName}`, 20, 40);

      // Add date range
      const dateRange =
        month && year
          ? `${new Date(year, month - 1).toLocaleDateString("en-US", {
              month: "long",
              year: "numeric",
            })}`
          : "All Records";
      doc.text(`Period: ${dateRange}`, 20, 50);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 60);

      // Add line separator
      doc.setDrawColor(200, 200, 200);
      doc.line(20, 70, 190, 70);

      // Prepare table data
      const tableData = records.map((record) => [
        new Date(record.date).toLocaleDateString("en-US", {
          year: "numeric",
          month: "short",
          day: "numeric",
        }),
        record.checkIn ? formatIndianTime(record.checkIn) : "N/A",

        record.checkOut ? formatIndianTime(record.checkOut) : "N/A",

        record.status === "ON_LEAVE"
          ? "On Leave"
          : record.status.charAt(0) + record.status.slice(1).toLowerCase(),
        record.late > 0 ? `${record.late} min` : "N/A",
        record.early !== null ? `${record.early} min` : "N/A",
      ]);

      // Add table
      autoTable(doc, {
        head: [
          [
            "Date",
            "Check In",
            "Check Out",
            "Status",
            "Late Minutes",
            "Early Exit",
          ],
        ],
        body: tableData,
        startY: 80,
        theme: "grid",
        headStyles: {
          fillColor: [66, 133, 244],
          textColor: [255, 255, 255],
          fontStyle: "bold",
          fontSize: 10,
        },
        bodyStyles: {
          fontSize: 9,
          cellPadding: 3,
        },
        alternateRowStyles: {
          fillColor: [248, 249, 250],
        },
        columnStyles: {
          0: { cellWidth: 35 }, // Date
          1: { cellWidth: 30 }, // Check In
          2: { cellWidth: 30 }, // Check Out
          3: { cellWidth: 25 }, // Status
          4: { cellWidth: 25 }, // Late Minutes
          5: { cellWidth: 25 }, // Early Exit
        },
        margin: { left: 20, right: 20 },
      });

      // Add summary statistics
      const finalY = (doc as any).lastAutoTable.finalY + 20;

      doc.setFontSize(12);
      doc.setTextColor(66, 133, 244);
      doc.text("Summary Statistics", 20, finalY);

      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);

      const totalDays = records.length;
      const presentDays = records.filter((r) => r.status === "PRESENT").length;
      const lateDays = records.filter((r) => r.status === "LATE").length;
      const absentDays = records.filter((r) => r.status === "ABSENT").length;
      const leaveDays = records.filter((r) => r.status === "ON_LEAVE").length;
      const totalLateMinutes = records.reduce((sum, r) => sum + r.late, 0);
      const totalEarlyExit = records.reduce(
        (sum, r) => sum + (r.early ?? 0),
        0
      );

      const summaryY = finalY + 10;
      doc.text(`Total Days: ${totalDays}`, 20, summaryY);
      doc.text(`Present: ${presentDays}`, 20, summaryY + 10);
      doc.text(`Late: ${lateDays}`, 20, summaryY + 20);
      doc.text(`Absent: ${absentDays}`, 80, summaryY);
      doc.text(`On Leave: ${leaveDays}`, 80, summaryY + 10);
      doc.text(`Total Late Minutes: ${totalLateMinutes}`, 80, summaryY + 20);
      doc.text(`Total Early Exit: ${totalEarlyExit}`, 80, summaryY + 20);

      // Add footer
      const pageHeight = doc.internal.pageSize.height;
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(
        "Generated by Attendance Management System",
        20,
        pageHeight - 20
      );
      doc.text(`Page 1 of 1`, 170, pageHeight - 20);

      // Save the PDF
      const fileName = `${employeeName.replace(
        /\s+/g,
        "_"
      )}_Attendance_${dateRange.replace(/\s+/g, "_")}.pdf`;
      doc.save(fileName);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Error generating PDF. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Button
      onClick={exportToPDF}
      disabled={isExporting || records.length === 0}
      className="bg-green-600 hover:bg-green-700 text-white"
    >
      {isExporting ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
          Generating...
        </>
      ) : (
        <>
          <Download className="mr-2 h-4 w-4" />
          Export PDF
        </>
      )}
    </Button>
  );
}
