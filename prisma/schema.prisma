// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 
}

model User {
  id                  String     @id @default(cuid())
  name                String
  email               String     @unique
  password            String
  role                String
  department          String
  salary              Int @default(0)
  
  totalLeavesTaken    Int        @default(0)  // Add this field
  totalLeavesApproved Int        @default(0)  // Add this field
  totalLeavesRejected Int        @default(0)  // Add this field
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  attendances         Attendance[]
  scheduleId          String?
  schedule            WorkSchedule? @relation(fields: [scheduleId], references: [id])
  leaves              TeacherLeave[]
}

model Attendance {
  id          String    @id @default(cuid())
  userId      String
  date        DateTime @db.Date
  checkIn     DateTime? 
  checkOut    DateTime?
  status      Status
  late        Int?
  photo       String?
  user        User      @relation(fields: [userId], references: [id])
  scheduleId  String?
  schedule    WorkSchedule? @relation(fields: [scheduleId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([date])
}

model WorkSchedule {
  id                    String   @id @default(cuid())
 
  department            String?
  startTime            String
  endTime              String
  graceMinutes         Int
  workDays             Int[]
  absentAutomation Boolean? @default(false)
  saturdayStartTime    String?
  saturdayEndTime      String?
  saturdayGraceMinutes Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  // Add location fields
  latitude             Float?
  longitude            Float?
  locationRadius       Float?
  // Relations
  users               User[]
  attendances         Attendance[]
}

model StudentLeave {
  id          String   @id @default(cuid())
  studentName String
  standard    String
  class       String
  parentName  String
  rollNo      String
  photo       String?
  purpose     String
  status      String   @default("Pending")
  date        DateTime 
  outTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for Teacher Leave requests
model TeacherLeave {
  id          String   @id @default(cuid())
  userId      String
  name        String
  department  String
  startDate   DateTime
  endDate     DateTime
  totalDays   Int?     // Add this field to store the calculated number of days
  reason      String
  status      String   @default("PENDING")
  feedback    String?  // Optional field to store admin feedback
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relation to User model
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startDate])
  @@index([endDate])
}

enum Status {
  PRESENT
  LATE
  ABSENT
  ON_LEAVE
  HOLIDAY
}
